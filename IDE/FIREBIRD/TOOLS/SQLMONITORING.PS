{$IFNDEF SQLMONITORING}
begin 

end.
{$ELSE}
{$IFNDEF PEAKTOP:OBJ/TACTION.INC}{$I PEAKTOP:OBJ/TACTION.INC}{$ENDIF}
{$IFNDEF PEAKTOP:OBJ/TRAY.INC}   {$I PEAKTOP:OBJ/TRAY.INC}   {$ENDIF}
const
  msg_sql_monitor       = 'SQL-monitor';
  msg_sql_monitor_hint  = 'Please, double click to show SQL-monitor';
  SQLMonitorFormName    = 'SQLMonitorForm1';
var
  SynEdit :TSynEdit;
  //============================================================================
  procedure TraySQL_OnDblClick(Sender :TObject);
  var
    i :Integer;
  begin
    for i:=0 to Amunhotep_MainForm.ComponentCount-1 do
      if(AnsiUpperCase(Amunhotep_MainForm.Components[i].ClassName) = 'TFORM')then
        if(AnsiUpperCase(Amunhotep_MainForm.Components[i].Name)=AnsiUpperCase(SQLMonitorFormName))then
          begin
          TForm(Amunhotep_MainForm.Components[i]).Show;
          exit;
          end;
  end;
  //============================================================================
  procedure SQLMon_OnSQL(EventText: String; EventTime : TDateTime);
  begin
    SynEdit.Text := SynEdit.Text+EventText;
  end;
  //============================================================================
  function CreateSQLMonitor(const FormName:string):TForm;
  var
    i       :Integer;
    ToolBar :TxcGradientPanel;
    SQLMon  :TxFBSQLMonitor;
    TraySQL :TxcGradientPanel;
  begin
    for i:=0 to Amunhotep.MainForm.ComponentCount-1 do
      if(AnsiUpperCase(Amunhotep.MainForm.Components[i].ClassName) = 'TFORM')then
        if(AnsiUpperCase(Amunhotep.MainForm.Components[i].Name)=AnsiUpperCase(FormName))then
          begin
          Result  := TForm(Amunhotep.MainForm.Components[i]);
          SynEdit := TSynEdit(Result.FindComponent('SynEdit'));
          //WriteLn('Find');
          exit;
          end;
    Result                 := TForm.Create(Amunhotep.MainForm);
    Result.Name            := AnsiUpperCase(FormName);
    Result.Caption         := msg_sql_monitor;
    Result.BorderStyle     := bsSizeToolWin;
    Result.Left            := 0;
    Result.Top             := 40;
    Result.Width           := 800;
    Result.Height          := 400;
    Result.FormStyle       := fsStayOnTop;
    Result.Color           := Amunhotep_MainForm_StyleManager.Colors.Foreground; 
    Result.Font.Color      := Amunhotep_MainForm_StyleManager.Colors.Border; 
    ToolBar                := TxcGradientPanel.Create(Result);
    ToolBar.Parent         := Result;
    ToolBar.Top            := 0;
    ToolBar.Height         := 0;
    ToolBar.Align          := alTop;
    ToolBar.Height         := 24;
    ToolBar.GradientDirect := gdBottomToTop;
    ToolBar.StyleManager   := Amunhotep.MainForm.StyleManager;
    ToolBar.BorderStyle    := xbsRaized;
    SynEdit                := TSynEdit.Create(Result);
    SynEdit.Name           := 'SynEdit';
    SynEdit.Parent         := Result;
    SynEdit.Align          := alClient;
    SynEdit.Color          := Amunhotep.MainForm.StyleManager.Colors.Window;
    SynEdit.Font.Color     := Amunhotep.MainForm.StyleManager.Colors.Border;
    SynEdit.Font.Size      := 8;
    SynEdit.Gutter.Color             := Amunhotep.MainForm.StyleManager.Colors.Foreground;
    SynEdit.Gutter.BorderColor       := Amunhotep.MainForm.StyleManager.Colors.Border;
    SynEdit.Gutter.GradientStartColor:= Amunhotep.MainForm.StyleManager.Colors.Window;
    SynEdit.Gutter.GradientEndColor  := Amunhotep.MainForm.StyleManager.Colors.Foreground;
    SynEdit.Gutter.Gradient          := Amunhotep.MainForm.StyleManager.Gradient;
    SynEdit.SelectedColor.Background := Amunhotep.MainForm.StyleManager.EditorSelectColor;
    SynEdit.SelectedColor.Foreground := Amunhotep.MainForm.StyleManager.Colors.Window;
    SynEdit.TabWidth                 := 2;
    SynEdit.Text                     := ''; 
    RegisterSynEdit(SynEdit, ftSQL);
    DontAutoFree;
    SQLMon                 := TxFBSQLMonitor.Create(Result);
    SQLMon.Name            := 'SQLMon';
    SQLMon.TraceFlags      := [tfQPrepare, tfQExecute, tfError, tfStmt, tfBlob, tfService, tfMisc];
    SQLMon.OnSQL           := @SQLMon_OnSQL;
    SQLMon.Enabled         := true;
    TraySQL                := CreateTray('TraySQL', msg_sql_monitor, msg_sql_monitor+#13#10+msg_sql_monitor_hint);
    TraySQL.OnDblClick     := @TraySQL_OnDblClick; 
  end;
  //============================================================================
begin
  FBDataBase.TraceFlags := [tfQPrepare, tfQExecute, tfError, tfStmt, tfBlob, tfService, tfMisc];
  CreateSQLMonitor(SQLMonitorFormName);
end.
{$ENDIF}
